mapItSome	hnimast/codegen/hts_wrapgen.html#mapItSome.t,Option[T],untyped	hts_wrapgen: mapItSome[T](opt: Option[T]; expr: untyped): untyped	
makeDistinctType	hnimast/codegen/hts_wrapgen.html#makeDistinctType,NType[PNode],NType[PNode]	hts_wrapgen: makeDistinctType(baseType, aliasType: NType[PNode]): PNode	
getAppCachedHashes	hnimast/codegen/hts_wrapgen.html#getAppCachedHashes	hts_wrapgen: getAppCachedHashes(): seq[string]	
setAppCachedHashes	hnimast/codegen/hts_wrapgen.html#setAppCachedHashes,seq[string]	hts_wrapgen: setAppCachedHashes(files: seq[string])	
noChangesForFile	hnimast/codegen/hts_wrapgen.html#noChangesForFile,AnyFile	hts_wrapgen: noChangesForFile(file: AnyFile): bool	
grammarFromFile	hnimast/codegen/hts_wrapgen.html#grammarFromFile,AbsFile,Option[AbsFile],Option[AbsFile],Option[AbsFile],Option[AbsFile],AbsDir,Option[FsDir],bool,string,bool,bool,seq[tuple[AbsFile,RelFile]],HLogger	hts_wrapgen: grammarFromFile(grammarJs: AbsFile;\n                scannerFile: Option[AbsFile] = none(AbsFile);\n                parserUser: Option[AbsFile] = none(AbsFile);\n                parserOut: Option[AbsFile] = none(AbsFile);\n                wrapperOut: Option[AbsFile] = none(AbsFile);\n                cacheDir: AbsDir = getAppCacheDir();\n                nimcacheDir: Option[FsDir] = none(FsDir);\n                forceBuild: bool = false; langPrefix: string = &quot;&quot;;\n                testLink: bool = true; testCheck: bool = true;\n                extraFiles: seq[tuple[src: AbsFile, target: RelFile]] = @[];\n                l: HLogger = newTermLogger())	
cliCheckFor	hnimast/codegen/hts_wrapgen.html#cliCheckFor,typedesc[Url]	hts_wrapgen: cliCheckFor(url: typedesc[Url]): CliCheck	
toCliValue	hnimast/codegen/hts_wrapgen.html#toCliValue,Url,string,CliDesc	hts_wrapgen: toCliValue(url: Url; doc: string = &quot;&quot;; desc: CliDesc = nil): CliValue	
fromCLiValue	hnimast/codegen/hts_wrapgen.html#fromCLiValue,CliValue,Url	hts_wrapgen: fromCLiValue(value: CliValue; url: var Url)	
grammarFromUrl	hnimast/codegen/hts_wrapgen.html#grammarFromUrl,Url,AbsFile,Option[Url],Option[AbsFile],Option[AbsFile],seq[tuple[AbsFile,RelFile]],bool,HLogger	hts_wrapgen: grammarFromUrl(grammarUrl: Url; grammarFile: AbsFile;\n               scannerUrl: Option[Url] = none(Url);\n               scannerFile: Option[AbsFile] = none(AbsFile);\n               parserOut: Option[AbsFile] = none(AbsFile);\n               extraFiles: seq[tuple[src: AbsFile, target: RelFile]] = @[];\n               testLink: bool = true; l: HLogger = newTermLogger())	
newApp	hnimast/codegen/hts_wrapgen.html#newApp	hts_wrapgen: newApp(): CliApp	
main	hnimast/codegen/hts_wrapgen.html#main,seq[string],HLogger,bool	hts_wrapgen: main(args: seq[string]; logger: HLogger = newTermLogger(); doQuit: bool = true)	
